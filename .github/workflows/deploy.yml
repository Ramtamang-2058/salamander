name: Deploy to EC2

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy via SSH
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            set -e

            sudo apt update
            sudo apt install -y docker.io docker-compose

            mkdir -p ~/salamander
            cd ~/salamander

            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }} .
            else
              git pull origin master
            fi

            mkdir -p config

            # Write Firebase config JSON file
            cat > config/salamanders-122ec-firebase-adminsdk-fbsvc-8c226bb171.json << JSONEOF
${{ secrets.FIREBASE_CONFIG }}
JSONEOF

            # Write .env file with secrets interpolated by GitHub Actions
            cat > .env << ENVEOF
FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
KHALTI_SECRET_KEY=${{ secrets.KHALTI_SECRET_KEY }}
ESEWA_SECRET_KEY=${{ secrets.ESEWA_SECRET_KEY }}
FIREBASE_SERVICE_ACCOUNT_PATH=config/salamanders-122ec-firebase-adminsdk-fbsvc-8c226bb171.json
FLASK_APP=app.py
FLASK_ENV=production
FLASK_RUN_HOST=0.0.0.0
SQLALCHEMY_DATABASE_URI=postgresql://salamander:password@db:5432/salamander
KHALTI_BASE_URL=https://khalti.com/api/v2/
ESEWA_BASE_URL=https://uat.esewa.com.np
ESEWA_PRODUCT_CODE=EPAYTEST
BASE_URL=https://your-domain.com
STEALTHGPT_API_URL=https://stealthgpt.ai/api/stealthify
ENVEOF

            echo "üöÄ Building and starting containers"
            docker-compose down || true
            docker-compose up -d --build

            echo "‚è≥ Waiting for app..."

            echo "üìã Container status:"
            docker-compose ps

            echo "üìÑ App logs (last 20 lines):"
            docker-compose logs --tail=20 app

            sleep 10

            for i in {1..15}; do
              echo "üîç Health check attempt $i/15"
              if ! docker-compose ps | grep -q "Up"; then
                echo "‚ùå Container stopped running"
                docker-compose logs app
                exit 1
              fi
              if curl -s -f http://localhost:5000/ >/dev/null 2>&1 || \
                 curl -s -f http://localhost:3000/ >/dev/null 2>&1 || \
                 curl -s -f http://localhost:8000/ >/dev/null 2>&1 || \
                 curl -s http://localhost:5000/health >/dev/null 2>&1; then
                echo "‚úÖ App is responding!"
                break
              fi
              if [ $i -eq 15 ]; then
                echo "‚ùå App did not respond after 15 attempts"
                docker-compose ps
                docker-compose logs app
                echo "‚ö†Ô∏è Deployment completed but app health check failed"
                break
              fi
              sleep 5
            done
          EOF
