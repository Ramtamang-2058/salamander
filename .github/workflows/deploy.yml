name: Deploy to EC2

on:
  push:
    branches: [master, main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy via SSH
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            set -e

            echo "üì¶ Updating system & installing Docker"
            sudo apt update -y
            sudo apt install -y docker.io docker-compose

            # Start and enable docker service
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add ubuntu user to docker group (effective after next login)
            sudo usermod -aG docker ubuntu

            echo "üìÅ Setting up app directory"
            mkdir -p ~/salamander
            cd ~/salamander

            # Determine branch name dynamically from GITHUB_REF environment variable
            BRANCH="\${GITHUB_REF##refs/heads/}"
            # fallback if GITHUB_REF not set
            if [ -z "\$BRANCH" ]; then
              BRANCH="master"
            fi

            # Clone or update repository
            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }} .
            else
              git fetch origin
              git reset --hard origin/\$BRANCH
            fi

            echo "üîê Setting up environment configuration"
            
            # Decode the base64 encoded .env file
            echo '${{ secrets.UNGABLE_MIXED42_B64 }}' | base64 -d > .env

            # Create Firebase service account JSON file with secret expanded
            mkdir -p config
            cat > config/salamanders-122ec-firebase-adminsdk-fbsvc-8c226bb171.json << EOF2
${{ secrets.FIREBASE_CONFIG }}
EOF2

            # Optionally export FIREBASE_CONFIG for docker-compose environment (if needed)
            export FIREBASE_CONFIG='${{ secrets.FIREBASE_CONFIG }}'
            
            echo "üìã Environment file status:"
            ls -la .env config/ || true
            echo "üìã .env file line count: \$(wc -l < .env)"

            echo "üê≥ Preparing Docker environment"
            docker-compose down --remove-orphans || true

            # WARNING: Prune cleans unused images, containers, networks, and cache
            # Make sure this is safe in your environment
            docker system prune -f

            # Uncomment below line if you want to remove old DB volumes and start fresh
            # docker volume rm salamander_postgres_data || true

            echo "üöÄ Building and starting containers"
            docker-compose build --no-cache

            # Run docker-compose with firebase config env var explicitly set
            FIREBASE_CONFIG='${{ secrets.FIREBASE_CONFIG }}' docker-compose up -d

            echo "‚è≥ Waiting for services to initialize..."
            sleep 15

            echo "üìä Container status:"
            docker-compose ps

            echo "üîç Performing comprehensive health checks..."
            for i in {1..40}; do
              echo "üîç Health check attempt \$i/40"

              # Check if containers are running or healthy
              if ! docker-compose ps | grep -E "(Up|healthy)"; then
                echo "‚ùå Containers not running properly"
                docker-compose ps
                echo "Recent app logs:"
                docker-compose logs app --tail=30
                echo "Recent db logs:"
                docker-compose logs db --tail=10

                if [ \$i -lt 35 ]; then
                  echo "üîÑ Attempting to restart containers..."
                  docker-compose restart
                  sleep 10
                  continue
                else
                  exit 1
                fi
              fi

              # Check app health endpoints
              if curl -s -f http://localhost:5000/health >/dev/null 2>&1; then
                echo "‚úÖ Health endpoint is responding!"

                if curl -s -f http://localhost:5000/ >/dev/null 2>&1; then
                  echo "‚úÖ Main application is responding!"
                  break
                else
                  echo "‚ö†Ô∏è Health endpoint works but main app might have issues"
                  if [ \$i -ge 35 ]; then
                    echo "Proceeding anyway as health endpoint is working..."
                    break
                  fi
                fi

              elif curl -s http://localhost:5000/ >/dev/null 2>&1; then
                echo "‚úÖ Main application is responding!"
                break
              fi

              if [ \$i -eq 40 ]; then
                echo "‚ùå Application did not respond after 40 attempts"
                docker-compose ps
                echo "Final app logs (last 50 lines):"
                docker-compose logs app --tail=50
                echo "Final db logs (last 20 lines):"
                docker-compose logs db --tail=20
                echo "Environment variables check:"
                docker-compose exec -T app env | grep -E "(FLASK|FIREBASE|DATABASE)" || true
                exit 1
              fi

              sleep 15
            done

            echo "üéâ Deployment successful!"
            echo "üìä Final status:"
            docker-compose ps

            echo "üìù Application info:"
            echo "- Main URL: http://${{ secrets.EC2_HOST }}:5000"
            echo "- Health check: http://${{ secrets.EC2_HOST }}:5000/health"

            echo "üìã Quick health test:"
            curl -s http://localhost:5000/health | head -5 || echo "Health endpoint not responding"
          EOF
